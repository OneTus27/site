from flask import (
    Flask,
    render_template,
    send_from_directory,
    request,
    session,
    jsonify,
)
from flask_wtf.csrf import CSRFProtect
from config import Config
from bot import NotificationBot
from datetime import datetime, timedelta
from typing import Dict, List
import os
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.config.from_object(Config)
csrf = CSRFProtect(app)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
ERROR_MESSAGES = {
    "rate_limit": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    "privacy_required": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
    "invalid_name": "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
    "invalid_phone": "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
    "phone_length": "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 —Ü–∏—Ñ—Ä",
    "name_too_short": "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ",
    "fake_name": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è",
    "submit_error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
telegram_bot = NotificationBot(
    token=app.config["TELEGRAM_BOT_TOKEN"],
    password=app.config["TELEGRAM_BOT_PASSWORD"],
    admin_chat_id=app.config["TELEGRAM_CHAT_ID"],
)
telegram_bot.run_in_thread()


def validate_phone(phone: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return "".join(filter(str.isdigit, phone))[-10:]


def format_phone(phone: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return f"+7 ({phone[:3]}) {phone[3:6]}-{phone[6:8]}-{phone[8:]}"


def build_telegram_message(data: Dict) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
    parts = [
        f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:",
        f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        f"üë§ –ò–º—è: {data['firstname']}",
    ]

    if lastname := data.get("lastname"):
        parts.append(f"üë§ –§–∞–º–∏–ª–∏—è: {lastname}")
    if patronymic := data.get("patronymic"):
        parts.append(f"üë§ –û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}")

    parts.extend(
        [
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {format_phone(data['phone'])}",
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message', '').strip() or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}",
        ]
    )

    return "\n".join(parts)


def send_to_telegram(data: Dict) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram"""
    try:
        message = build_telegram_message(data)
        return telegram_bot.send_message(message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False


def check_request_limit(ip: str) -> bool:
    now = datetime.now()
    requests = session.get("requests", [])
    window = timedelta(seconds=app.config["REQUEST_WINDOW"])
    requests = [r for r in requests if now - r < window]

    if len(requests) >= app.config["REQUEST_LIMIT"]:
        return False

    requests.append(now)
    session["requests"] = requests
    return True


def validate_form_data(data: Dict) -> List[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã"""
    errors = []

    if not data["firstname"]:
        errors.append(ERROR_MESSAGES["invalid_name"])
    if not data["phone"]:
        errors.append(ERROR_MESSAGES["invalid_phone"])
    elif len(data["phone"]) != 10:
        errors.append(ERROR_MESSAGES["phone_length"])
    elif len(data["firstname"]) < 2:
        errors.append(ERROR_MESSAGES["name_too_short"])
    elif data["firstname"].lower() in ["—Ç–µ—Å—Ç", "–ø—Ä–∏–º–µ—Ä"]:
        errors.append(ERROR_MESSAGES["fake_name"])

    return errors


@app.route("/submit-feedback", methods=["POST"])
def submit_feedback():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    if not check_request_limit(request.remote_addr):
        return jsonify({"error": ERROR_MESSAGES["rate_limit"]}), 429

    if not request.form.get("privacy"):
        return jsonify({"error": ERROR_MESSAGES["privacy_required"]}), 400

    form_data = {
        "firstname": request.form.get("firstname", "").strip(),
        "lastname": request.form.get("lastname", "").strip(),
        "patronymic": request.form.get("patronymic", "").strip(),
        "phone": validate_phone(request.form.get("phone", "")),
        "message": request.form.get("message", "").strip(),
    }

    if errors := validate_form_data(form_data):
        return jsonify({"error": " ".join(errors)}), 400

    try:
        if send_to_telegram(form_data):
            return jsonify({"success": True})
        return jsonify({"error": ERROR_MESSAGES["submit_error"]}), 500
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã: {e}")
        return jsonify({"error": str(e)}), 500


# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ—É—Ç—ã
@app.route("/feedback_content")
def feedback_content():
    return render_template("feedback_content.html")


@app.route("/feedback-success")
def feedback_success():
    return "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."


@app.route("/feedback-error")
def feedback_error():
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


@app.route("/")
def home():
    return render_template("main.html", active_page="main")


@app.route("/about")
def about():
    return render_template("about.html", active_page="about")


@app.route("/tovari")
def tovari():
    return render_template("tovari.html")


@app.route("/contacts")
def contacts():
    return render_template("contacts.html", active_page="contacts")


@app.route("/privacy-policy")
def privacy_policy():
    return render_template("privacy_policy.html", active_page="privacy_policy")


# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
@app.route("/static/<path:filename>")
def serve_static(filename):
    return send_from_directory("static", filename)


@app.route("/favicon.ico")
def favicon():
    return send_from_directory(
        os.path.join(app.root_path, "static", "favicon"),
        "favicon.ico",
        mimetype="image/vnd.microsoft.icon",
    )


# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
@app.route("/admin/update_password", methods=["POST"])
def update_bot_password():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –±–æ—Ç–∞"""
    auth_header = request.headers.get("Authorization")
    if auth_header != app.config["SECRET_KEY"]:
        return {"status": "error", "message": "Unauthorized"}, 401

    if not request.json or "new_password" not in request.json:
        return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}, 400

    try:
        telegram_bot.update_password(request.json["new_password"])
        return {
            "status": "success",
            "message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.",
        }
    except Exception as e:
        return {"status": "error", "message": str(e)}, 500


@app.route("/submit-order", methods=["POST"])
@csrf.exempt
def submit_order():
    try:
        data = request.get_json()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not data.get("name") or not data.get("phone"):
            return jsonify({"error": "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"}), 400

        phone = data["phone"]
        if len(phone) != 10 or not phone.isdigit():
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞"}), 400

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = [
            "üì¶ –ù–û–í–´–ô –ó–ê–ö–ê–ó",
            f"üë§ –ò–º—è: {data['name']}",
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 ({phone[:3]}) {phone[3:6]}-{phone[6:8]}-{phone[8:]}",
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '–Ω–µ —É–∫–∞–∑–∞–Ω')}",
            "",
            "üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:",
            *[
                f"- {i['name']}: {i['quantity']} {i['unit']} √ó {i['pricePerUnit']} ‚ÇΩ = {i['price']} ‚ÇΩ"
                for i in data["order"]["items"]
            ],
            "",
            f"üí∞ –ò—Ç–æ–≥–æ: {data['order']['total']} ‚ÇΩ",
            f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        ]

        if telegram_bot.send_message("\n".join(message)):
            return jsonify({"success": True})
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞"}), 500

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500


if __name__ == "__main__":
    try:
        app.run(host="0.0.0.0", port=5000, use_reloader=False)
    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    finally:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        telegram_bot.shutdown()
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
